#!/usr/bin/env bash

set -e

[ -n "$SCRIPT" ] || SCRIPT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

echo "Select which RabbitMQ deployment to run diagnostics against:"
select RMQ_DEPLOYMENT in $("$SCRIPT"/_rabbitmq-server_deployments)
do
  export RMQ_DEPLOYMENT
  break
done

RMQ_INSTANCE_COUNT=$(bosh -d "$RMQ_DEPLOYMENT" instances | grep -c rmq)

if [[ $1 = --recent ]]
then
  echo "Displaying diagnostics on $RMQ_DEPLOYMENT ..."
  for (( i=0; i<RMQ_INSTANCE_COUNT; i++ ))
  do
    echo "Displaying tests on rmq/$i ..."
    bosh -d "$RMQ_DEPLOYMENT" ssh rmq/$i -r -c "sudo -i bash -c 'diagnostic_files=(/var/vcap/sys/log/diagnostics/diagnostics-*.report) ; [ ! -f \${diagnostic_files[-1]} ] || cat \${diagnostic_files[-1]}'"
  done
else
  echo "Running diagnostics on $RMQ_DEPLOYMENT ..."
  LOG_FILE="/tmp/$RMQ_DEPLOYMENT-$(date -u +'%Y-%m-%dT%H:%M:%SZ').log"
  echo "Check out output at $LOG_FILE"

  for (( i=0; i<RMQ_INSTANCE_COUNT; i++ ))
  do
    echo "Running tests on rmq/$i ..."
    bosh -d "$RMQ_DEPLOYMENT" ssh rmq/$i -c "sudo -i bash -c 'DEBUG=false diagnostics'"  2>&1 |
      tee -a "$LOG_FILE" |
      awk '/^--- (FAIL|PASS|::)/ { print $5 " " $6 }'
  done

  # exit 0   -> no failures
  # exit 5   -> 5 tests failed
  exit "$(grep -c '\| FAIL' "$LOG_FILE" )"
fi
