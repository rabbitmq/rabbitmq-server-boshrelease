#!/usr/bin/env bash

set -e

# shellcheck source=/dev/null
. /var/vcap/jobs/rabbitmq-server/env
configureDebugLevel

main() {
  log "$(date --iso-8601=seconds) ::: v${BOSH_RELEASE_VERSION:?must be set}"
  if tracked_rabbitmq_server_pid_running
  then
    rabbitmq_node_is_accessible
    RABBITMQ_PID="$(rabbitmq_pid)"

    # shellcheck source=/dev/null
    . ${RABBITMQ_DIAGNOSTICS_PACKAGE_DIR:?must be set}/_take_snapshots 1>&2

    stop_rabbitmq_app
    ( stop_erlang_vm && wait_for_erlang_vm_to_stop ) || failed_to_stop_erlang_vm
    log "RabbitMQ node stopped"
  else
    log "There is no Erlang VM running for $RABBITMQ_NODENAME that is tracked via PID file ${RABBITMQ_PID_FILE:?must be set}"
  fi

  run_stop_since_monit_will_not_run_it_if_no_process_is_found_for_the_pid_that_it_tracks
  signal_success_to_bosh
}

tracked_rabbitmq_server_pid_running() {
  log "Is there a running process for the tracked rabbitmq-server PID file $RABBITMQ_PID_FILE ?"
  ps -o comm=,args= "$(cat "$RABBITMQ_PID_FILE")" 1>>"${RABBITMQ_LOG_BASE:?must be set}/drain.log" 2>&1
}

rabbitmq_node_is_accessible() {
  log "Prove that we can communicate with the RabbitMQ node by getting its PID"
  rabbitmq_pid 1>>"$RABBITMQ_LOG_BASE/drain.log" 2>&1 || exit 1
}

rabbitmq_pid() {
  rabbitmqctl eval "list_to_integer(os:getpid())."
}

stop_rabbitmq_app() {
  log "Stopping RabbitMQ app, will timeout in ${SERVICE_SHUTDOWN_TIMEOUT:?must be set}s ..."

  if timeout "$SERVICE_SHUTDOWN_TIMEOUT" rabbitmqctl stop_app 1>>"$RABBITMQ_LOG_BASE/drain.log" 2>&1
  then
    log "RabbitMQ app successfully stopped"
  else
    log "RabbitMQ app failed to stop"
  fi
}

log() {
  echo "$*" >> "$RABBITMQ_LOG_BASE/drain.log"
}

stop_erlang_vm() {
  log "Stopping Erlang VM ..."
  rabbitmqctl eval "init:stop()." 1>>"$RABBITMQ_LOG_BASE/drain.log" 2>&1
}

wait_for_erlang_vm_to_stop() {
  log "Waiting up to ${SERVICE_SHUTDOWN_TIMEOUT}s for Erlang VM to stop ..."
  timeout "$SERVICE_SHUTDOWN_TIMEOUT" bash -c "
while ps ${RABBITMQ_PID:?must be set}
do
  sleep 0.5
done" 1>/dev/null 2>&1
}

failed_to_stop_erlang_vm() {
  log "Erlang VM failed to stop cleanly within ${SERVICE_SHUTDOWN_TIMEOUT}s, manual intervention is required:

* Is there enough disk space? df -h
* Is the Erlang node running? pgrep -a beam
* Is the Erlang VM crashing? lsof -p \$(pgrep beam) | grep crash
* Is the Erlang distribution in a healthy state? epmd -names
* Is the RabbitMQ node accessible? rabbitmqctl eval 'ok.'
* Are there any stuck processes? rabbitmqctl eval 'rabbit:maybe_stuck().'

Based on the above, it might be safe to send SIGTERM to the Erlang VM process, it's a decision that can only be taken by an operator"

  exit 1
}


run_stop_since_monit_will_not_run_it_if_no_process_is_found_for_the_pid_that_it_tracks() {
  /var/vcap/jobs/rabbitmq-server/bin/stop 1>&2
}

signal_success_to_bosh() {
  echo 0
}

main
