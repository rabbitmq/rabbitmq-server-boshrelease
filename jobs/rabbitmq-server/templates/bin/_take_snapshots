#!/usr/bin/env bash

main() {
  log "Taking snaphots to $RABBITMQ_SNAPSHOTS_DIR"
  create_or_reset_store
  take_vhosts_snaphot
  take_users_snapshot
  take_users_permissions_snapshot
  take_users_topic_permissions_snapshot_if_supported
  take_users_policies_snapshot
  take_operator_policies_snapshot
  take_parameters_snapshot
}

# Topic Permissions feature available since 3.7.0
is_topic_permissions_supported() {
  [[ -n "$(rabbitmqctl 2>&1 | grep list_topic_permissions)" ]]
}
is_operator_policies_supported() {
  [[ -n "$(rabbitmqctl 2>&1 | grep list_operator_policies)" ]]
}

take_vhosts_snaphot() {
  log "Taking snaphost of vhosts to $RABBITMQ_SNAPSHOTS_DIR/vhosts.snapshot"
  rabbitmqctl list_vhosts | tail -n +2 > $RABBITMQ_SNAPSHOTS_DIR/vhosts.snapshot
}
take_users_snapshot() {
  log "Taking snaphost of users to $RABBITMQ_SNAPSHOTS_DIR/users.snapshot"
  rabbitmqctl list_users | tail -n +2 | sort > $RABBITMQ_SNAPSHOTS_DIR/users.snapshot
}
take_users_permissions_snapshot() {
  local list_of_vhosts
  log "Taking snaphost of user permissions per vhost to $RABBITMQ_SNAPSHOTS_DIR"
  list_of_vhosts=$(rabbitmqctl list_vhosts | tail -n +2 | tr '\n' ' ')

  for vhost in $list_of_vhosts
  do
    local normalized_vhost
    if [[ "$vhost" == '/' ]]
    then
      normalized_vhost='default'
    else
      normalized_vhost=$vhost
    fi
    rabbitmqctl list_permissions -p $vhost | tail -n +2 | sort > $RABBITMQ_SNAPSHOTS_DIR/${normalized_vhost}_permissions.snapshot
  done
}
take_users_topic_permissions_snapshot_if_supported() {
  if is_topic_permissions_supported
  then
    take_users_topic_permissions_snapshot
  else
    log "Skipped Topic Permissions snapshot. Not supported."
  fi
}
take_users_topic_permissions_snapshot() {
  local list_of_vhosts
  log "Taking snaphost of user topics permissions per vhost to $RABBITMQ_SNAPSHOTS_DIR"
  list_of_vhosts=$(rabbitmqctl list_vhosts | tail -n +2 | tr '\n' ' ')
  for vhost in $list_of_vhosts
  do
    local normalized_vhost
    if [[ "$vhost" == '/' ]]
    then
      normalized_vhost='default'
    else
      normalized_vhost=$vhost
    fi
    rabbitmqctl list_topic_permissions -p $vhost | tail -n +2 | sort > $RABBITMQ_SNAPSHOTS_DIR/${normalized_vhost}_topic_permissions.snapshot
  done
}
take_users_policies_snapshot() {
  local list_of_vhosts
  log "Taking snaphost of user policies per vhost to $RABBITMQ_SNAPSHOTS_DIR"
  list_of_vhosts=$(rabbitmqctl list_vhosts | tail -n +2 | tr '\n' ' ')

  for vhost in $list_of_vhosts
  do
    local normalized_vhost
    if [[ "$vhost" == '/' ]]
    then
      normalized_vhost='default'
    else
      normalized_vhost=$vhost
    fi
    rabbitmqctl list_policies -p $vhost | tail -n +2 | sort > $RABBITMQ_SNAPSHOTS_DIR/${normalized_vhost}_policies.snapshot
  done
}
take_operator_policies_snapshot_if_supported() {
  if is_operator_policies_supported
  then
    take_operator_policies_snapshot
  else
    log "Skipped Operator Policies snapshot. Not supported."
  fi
}
take_operator_policies_snapshot() {
  local list_of_vhosts
  log "Taking snaphost of operator policies per vhost to $RABBITMQ_SNAPSHOTS_DIR"
  list_of_vhosts=$(rabbitmqctl list_vhosts | tail -n +2 | tr '\n' ' ')

  for vhost in $list_of_vhosts
  do
    local normalized_vhost
    if [[ "$vhost" == '/' ]]
    then
      normalized_vhost='default'
    else
      normalized_vhost=$vhost
    fi
    rabbitmqctl list_operator_policies -p $vhost | tail -n +2 | sort > $RABBITMQ_SNAPSHOTS_DIR/${normalized_vhost}_operator_policies.snapshot
  done
}
take_parameters_snapshot() {
  local list_of_vhosts
  log "Taking snaphost of parameters per vhost to $RABBITMQ_SNAPSHOTS_DIR"
  list_of_vhosts=$(rabbitmqctl list_vhosts | tail -n +2 | tr '\n' ' ')

  for vhost in $list_of_vhosts
  do
    local normalized_vhost
    if [[ "$vhost" == '/' ]]
    then
      normalized_vhost='default'
    else
      normalized_vhost=$vhost
    fi
    rabbitmqctl list_parameters -p $vhost | tail -n +2 | sort > $RABBITMQ_SNAPSHOTS_DIR/${normalized_vhost}_parameters.snapshot
  done
}
take_global_parameters_snapshot() {
  log "Taking snaphost of global parameters to $RABBITMQ_SNAPSHOTS_DIR"
  rabbitmqctl list_global_parameters | tail -n +2 | sort > $RABBITMQ_SNAPSHOTS_DIR/global_parameters.snapshot
}
create_or_reset_store() {
  mkdir -p $RABBITMQ_SNAPSHOTS_DIR
  rm -f "$RABBITMQ_SNAPSHOTS_DIR/*" 2> /dev/null
}

main
