#!/usr/bin/env bash

# TL;DR : MAKE SURE THAT NOTHING PRINTS OUT TO THE STDOUT SINCE BOSH RELIES ON SPECIFIC OUTPUT FOR THE TASK TO SUCCEED
# SEE https://bosh.io/docs/drain/#script-implementation FOR MORE DETAILS

set -e

# shellcheck source=/dev/null
. /var/vcap/jobs/diagnostics/env
configureDebugLevel

# shellcheck source=/dev/null
. "${RABBITMQ_ENV:?must de set}"

main() {
  if tracked_rabbitmq_server_pid_running && rabbitmq_node_is_accessible
  then
     take_vhosts_snaphot
  else
    log "There is no Erlang VM running for $RABBITMQ_NODENAME that is tracked via PID file ${RABBITMQ_PID_FILE:?must be set}"
  fi
  signal_success_to_bosh
}

log() {
  echo "$*" >> "$DIAGNOSTICS_LOG_BASE/drain.log"
}
tracked_rabbitmq_server_pid_running() {
  log "Is there a running process for the tracked rabbitmq-server PID file $RABBITMQ_PID_FILE ?"
  ps -o comm=,args= "$(cat "$RABBITMQ_PID_FILE")" 1>>"${RABBITMQ_LOG_BASE:?must be set}/drain.log" 2>&1
}
rabbitmq_node_is_accessible() {
  log "Prove that we can communicate with the RabbitMQ node by getting its PID"
  rabbitmq_pid 1>>"$RABBITMQ_LOG_BASE/drain.log" 2>&1 || exit 1
}
rabbitmq_pid() {
  rabbitmqctl eval "list_to_integer(os:getpid())."
}
take_vhosts_snaphot() {
  mkdir -p $DIAGNOSTICS_STORE_DIR
  log "Taking snaphost of vhosts to $DIAGNOSTICS_VHOSTS_SNAPSHOT"
  rabbitmqctl list_vhosts | tail -n +2 >  $DIAGNOSTICS_VHOSTS_SNAPSHOT
}
signal_success_to_bosh() {
  echo 0
}

main
